package Cracking;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

class ListNode{
	int val;
	ListNode next;
	public ListNode(int val){
		this.val = val;
	}
}


class TreeNode{
	int val;
	TreeNode left;
	TreeNode right;
	TreeNode(int x){
		this.val = x;
	}
}
public class Solution {
	//测试使用函数
	public void listShow(ListNode head){
		while(head != null){
			System.out.print(head.val + " ");
			head = head.next;
		}
		System.out.println();
	}
	//测试使用函数
	public ListNode constructList(int[] arr){
		if(arr.length == 0) return null;
		ListNode head = new ListNode(arr[0]);
		ListNode prev = head;
		for(int i=1;i<arr.length;i++){
			prev.next = new ListNode(arr[i]);
			prev = prev.next;
		}
		return head;
	}
	

	
	

	//----------------------Page109 1.3----------------------------------------
	

	public String sort(String s){
		char[] content = s.toCharArray();
		java.util.Arrays.sort(content);
		return new String(content);
	}
	
	//解法一：排序字符串。这个算法算不上最优，不过换个角度看，该算法或许更加可取;
	//它清晰，简单且易懂。 good 
	public boolean permutation(String s,String t){
		if(s.length() != t.length()) return false;
		return sort(s).equals(sort(t));
	}
	//效率当头，这个方法很好。 good 
	public boolean permutation2(String s,String t){
		if(s.length() != t.length()) return false;
		int[] letters = new int[256];
		char[] s_array = s.toCharArray();
		for(char c:s_array){
			letters[c]++;
		}
		for(int i=0;i<t.length();i++){
			int c = (int)t.charAt(i);
			if(--letters[c] < 0)
				return false;
		}
		return true;
	}
	
	
	//another way same as permutation2  better 
	public boolean permutation3(String s,String t){
		if(s.length() != t.length()) return false;
		int[] letters = new int[256];
		for(int i=0;i<s.length();i++){
			letters[s.charAt(i)]++;
		}
		for(int i=0;i<t.length();i++){
			if(--letters[t.charAt(i)] < 0)
				return false;
		}
		return true;
	}
	
	public  void permutationTest(){
		String s = "yinshuai";
		String t = "yinhuaiz";
		System.out.println(permutation3(s,t));
	}
	
	
	
	
	//------------- page 111  1.4 -------------------------------------------------------
	public void replaceSpaces(char[] str,int length){
		int spaceCount = 0,newLength,i;
		for(i = 0;i<length;i++){
			if(str[i] == ' ') spaceCount++;
		}
		newLength = length + spaceCount*2;
		str[newLength] = '\0';
		for(i = length-1; i>=0;i--){
			if(str[i] == ' '){tring s,String t){
				if(s.length() != t.length()) return false;
				int[] letters = new int[256];
				for(int i=0;i<s.length();i++){
					letters[s.charAt(i)]++;
				}
				for(int i=0;i<t.length();i++){
					if(--letters[t.charAt(i)] < 0)
						return false;
				str[newLength-1] = '0';
				str[newLength-2] = '2';
				str[newLength-3] = '%';
				newLength = newLength -3;
			}else{
				str[--newLength] = str[i];
			}
		}
	}
	
	
	//---------------- Page 112 1.5 ----------------------
	//该函数的复杂度为O(p + k*k) 其中字符串拼接操作的时间复杂度为O(N*N)
	public String compressBad(String str){
		String mystr = "";
		char last = str.charAt(0);
		int count = 1;
		for(int i=1; i < str.length();i++){
			if(str.charAt(i) == last){//找到重复字符串
				count++;
			}else{//插入字符串的数目，更新last的值
				mystr += last + "" + count;
				last = str.charAt(i);
				count = 1;
			}
		}
		return mystr + last + count;
	}
	//使用StringBuffer优化部分性能
	public String compressBetter(String str){
		/*检查压缩后的字符串是否会变长*/
		int size = countCompression(str);
		if(size >= str.length()) return str;
		StringBuffer mystr = new StringBuffer();
		char last = str.charAt(0);
		int count = 1;
		for(int i = 1;i < str.length(); i++){
			if(str.charAt(i) == last){
				count++;
			}else{
				mystr.append(last);
				mystr.append(count);
				last = str.charAt(i);
				count = 1;
			}
		}
		/**最后一组重复字符还未曾放入*/
		mystr.append(last);
		mystr.append(count);
		return mystr.toString();
	}
	
	public int countCompression(String str){
		if(str == null || str.isEmpty()) return 0;
		char last = str.charAt(0);
		int size = 0;
		int count = 1;
		for(int i=1;i < str.length();i++){
			if(str.charAt(i) == last){
				count++;
			}else{
				last = str.charAt(i);
				size += 1 + String.valueOf(count).length();
				count =1;
			}
		}
		size += 1 + String.valueOf(count).length();
		return size;
	}
	
	//这里可以不使用Stringbuffer。因为第2行代码会计算出字符串压缩后的长度。
	public String compressAlternate(String str){
		int size = countCompression(str);
		if(size >= str.length()) return str;
		char[] array = new char[size];//
		int index = 0;
		char last = str.charAt(0);
		int count = 1;
		for(int i=1;i<str.length();i++){
			if(str.charAt(i) == last){
				count++;
			}else{
				index  = setChar(array,last,index,count);
				last = str.charAt(i);
				count = 1;
			}
		}
		/*以最后一组重复字符更新字符串*/
		index = setChar(array,last,index,count);
		return String.valueOf(array);//将字符数组转换为字符串
	}
	public int setChar(char[] array,char c,int index,int count){
		array[index] = c;
		index++;
		/*将数目转换为字符串，然后转为字符数组*/
		char[] cnt = String.valueOf(count).toCharArray();
		/*从最大的数字到最小的，复制字符*/
		for(char x: cnt){
			array[index] = x;
			index++;
		}
		return index;
	}
	
	public void compressTest(){
		String a = "aabbbbbc";
		String res = compressAlternate(a);
		System.out.println(res);
		
	}
	
	
	
	
	//---------------- page 114  1.6 ---------------------
	public void rotate(int[][] matrix,int n){
		for(int layer = 0;layer < n/2; ++layer){
			int first = layer;
			int last = n-1-layer;
			for(int i=first;i<last;i++){
				int offset = i - first;
				//存储上边
				int top = matrix[first][i];
				//左到上
				matrix[first][i] = matrix[last-offset][first];
				//下到左
				matrix[last-offset][first] = matrix[last][last - offset];
				//右到下
				matrix[last][last-offset] = matrix[i][last];
				//上到右
				matrix[i][last] = top;
			}
		}
	}
	
	
	
	//-------------------- page 116  1.7 ---------------------------
	public void setZeros(int[][] matrix){
		boolean[] row = new boolean[matrix.length];
		boolean[] column = new boolean[matrix[0].length];
		//记录值为0的元素所在的行索引和列索引
		for(int i=0;i<matrix.length;i++){
			for(int j = 0; j < matrix[0].length;j++){
				if(matrix[i][j] == 0){
					row[i] = true;
					row[j] = true;
				}
			}
		}
		for(int i = 0; i < matrix.length;i++){
			for(int j = 0; j < matrix[0].length;j++){
				if(row[i] || column[i])
					matrix[i][j] = 0;
			}
		}
	}

	
	//----- page 116  1.8 ---------------------------------------------
	public boolean isRotation(String s1,String s2){
		int len = s1.length();
		if(len == s2.length() && len > 0){
			String s1s1 = s1 + s1;
			return s1s1.contains(s2);
		}
		return false;
	}
	
	//----------------- page 117 --------------------------
	
	public void deleteDupsUsingExtraSpace(ListNode head){
		if(head == null || head.next == null) return;
		HashMap<Integer,Boolean> hm = new HashMap<Integer,Boolean>();
		hm.put(head.val,true);//头部肯定是不重复的。
		while(head.next != null){//head.next一直是受到嫌疑的。
			if(!hm.containsKey(head.next.val)){
				hm.put(head.next.val,true);
				head = head.next;//解除嫌疑。
			}else{
				head.next = head.next.next;//直接去掉嫌疑犯。当然啊，新的嫌疑犯也出现了
			}
		}
	}
	public void deleteDups(ListNode head){//不使用缓冲区的方案
		if(head == null || head.next == null) return;
		ListNode current = head;
		while(current != null){
			ListNode runner = current;
			while(runner.next != null){//嫌疑犯。
				if(runner.next.val == current.val){
					runner.next = runner.next.next;
				}else{
					runner = runner.next;
				}
			}
			current = current.next;
		}
	}
	

	
	
	public void deleteDupsTest(){
		ListNode prev = new ListNode(0);
		ListNode head = prev;
		int[] arr = {2,4,0,3,2,4,5,6,7,5,8,90,34,5,67};
		for(int val:arr){
			prev.next = new ListNode(val);
			prev = prev.next;
		}
		deleteDups(head);
		listShow(head);
		deleteDupsUsingExtraSpace(head);
		listShow(head);
	}

	
	
	
	//------------------- page 118   2.2 -----------------------------------------
	//这里直接使用解法3 
	ListNode nthToLast(ListNode head,int k){
		if(k <= 0) return null;
		ListNode p1 = head;
		ListNode p2 = head;
		//p2向前移动k个节点
		for(int i=0;i<k-1;i++){
			if(p2 == null) return null;
			p2 = p2.next;
		}
		if(p2 == null) return null;
		/*现在以同样的速度移动p1和p2,当p2抵达链表末尾时，p1刚好指向倒数第k个结点。**/
		while(p2.next != null){
			p1 = p1.next;
			p2 = p2.next;
		}
		return p1;
	}
	
	////----------------- page 120 2.3------------------------------
	public boolean deleteNode(ListNode n){
		if(n == null || n.next == null) return false;
		n.val = n.next.val;
		n.next = n.next.next;
		return true;
	}
	
	///--------  page 121 2.4 -----------------------------------
	public ListNode partition(ListNode node,int x){
		ListNode beforeStart = null;
		ListNode beforeEnd = null;
		ListNode afterStart = null;
		ListNode afterEnd = null;
		/*分割链表*/
		while(node  != null){
			ListNode next = node.next;
			node.next = null;
			if(node.val < x){
				/*将结点插入before链表*/
				if(beforeStart == null){
					beforeStart = node;
					beforeEnd = beforeStart;
				}else{
					beforeEnd.next = node;
					beforeEnd = beforeEnd.next;
				}
			}else{
				/*将结点插入after链表*/
				if(afterStart == null){
					afterStart = node;
					afterEnd = node;
				}else{
					afterEnd.next = node;
					afterEnd = afterEnd.next;
				}
			}
			node = node.next;
		}
		if(beforeStart == null){
			return afterStart;
		}
		/*合并before 和after链表*/
		beforeEnd.next = afterStart;
		return beforeStart;
	}
	
	
	//--------------  page 123  2.5  ----------
	//下面是自己实现的方案，正确性有待考究。不过自己的这种方案是迭代的。不是递归的
	//我的这种方案的时间复杂度是max(m,n) 空间复杂度为O(n)
	ListNode addLists(ListNode l1,ListNode l2){
		if(l1 == null) return l2;
		if(l2 == null) return l1;
		ListNode result = new ListNode(-1);//辅助头节点的引入
		ListNode prev = result;
		int carry = 0;
		while(l1 != null || l2 != null){
			int sum = (l1 != null ? l1.val : 0)  + (l2 != null ? l2.val:0) + carry;
			prev.next = new ListNode(sum%10);
			carry = sum/10;
			prev = prev.next;
			if(l1 != null) l1 = l1.next;
			if(l2 != null) l2 = l2.next;
		}
		if(carry != 0) prev.next = new ListNode(carry);
		return result.next;
	}
	public void addListsTest(){
		int[] arr1 = {9};
		int[] arr2 = {1,2,9,9,9};
		ListNode a = this.constructList(arr1);
		listShow(a);
		ListNode b = this.constructList(arr2);
		ListNode c = addLists(a,b);
		listShow(c);
		
	}
	//进阶版本的个人实现。即这里的数位是正向存放的。  不过递归版本还要自己后面去实现
	
	
	
	
	
	//反转链表，这个金典里面没有，但是也是一定要会。 而且要求时间复杂度不高
	//这个是非递归，而是迭代的方式。但是其leetcode只beats 36%的。
	//递归版本后面了解递归之后要补充上。
	public ListNode reverseList(ListNode head){
		if(head == null || head.next == null) return head;
		ListNode prevNode = head;
		ListNode nextNode = head.next;
		while(nextNode != null){
			ListNode tmp = nextNode.next;
			nextNode.next = prevNode;
			prevNode = nextNode;
			nextNode = tmp;
		}
		head.next = null;
		return prevNode;
	}
	

	
	/**同样是来自leetcode（99）上的题目 这里 是要反转一定区间内的链表
	 * medium degree
	 * Given 1->2->3->4->5->NULL, m = 2 and n = 4,
	 * return 1->4->3->2->5->NULL.
	 * 这个方案只beats 2.94% 那么看下下面的这种方案
	 */
    public ListNode reverseBetween(ListNode head, int m, int n) {
       if(head == null || m >= n) return head;
       ListNode prevMNode = null;//第M个节点之前的结点(M-1)
       ListNode prevNode = head;
       for(int i=0; i < m-1; i++){//传送到(第)m个节点。这里要用m-1
    	   prevMNode = prevNode;
    	   if(prevNode == null) return head;//都没有m-1个节点。
    	   prevNode = prevNode.next;
       }
       //判断下第m个结点 
       if(prevNode == null) return head;//都没有m个结点。转啥
       ListNode mNode = prevNode;//保存第m个节点 后面还有用
       ListNode nextNode = prevNode.next;
       int reverseCnt = n - m;
       while(nextNode != null && reverseCnt > 0){
    	   ListNode tmp = nextNode.next;//临时缓存下一个结点
    	   nextNode.next = prevNode;
    	   prevNode = nextNode;
    	   nextNode = tmp;
    	   reverseCnt--;
       }
       if(prevMNode == null){
    	   head.next = nextNode;
    	   head = prevNode;
       }else{
    	   prevMNode.next = prevNode;
    	   mNode.next = nextNode;
       }
       return head;

    }
    


    
    //----- leetcode 541 -----
    //Input: s = "abcdefg", k = 2
    //Output: "bacdfeg"  ac 7ms   0412
    public String reverseStr(String s,int k){
    	char[] sarr = s.toCharArray();
    	int n = sarr.length;
    	int i = 0;
    	while(i < n){
    		int j = Math.min(i+k-1,n-1);
    		swap(sarr,i,j);
    		i += 2*k;
    	}
    	return String.valueOf(sarr);
    }
    //非常好的 字符在swap 函数 。 要背过
    private void swap(char[] arr,int l,int r){
    	while(l < r){
    		char tmp = arr[l];
    		arr[l++] = arr[r];
    		arr[r--] = tmp;
    	}
    }
    
    public void reverseStrTest(){
    	System.out.println(this.reverseStr("abcdefg", 4));
    }
    
    
    //// ----------- leetcode  151. Reverse Words in a String beats  ac  0412 49.39%
    public String reverseWords1(String s) {
    	String[] parts = s.trim().split("\\s+");//按照空格切分
    	StringBuffer sb = new StringBuffer();
    	for(int i = parts.length-1;i>0;i--){
    		sb.append(parts[i]);
    		sb.append(' ');
    	}
    	sb.append(parts[0]);
    	return sb.toString();
    }
    public void reverseWords1Test(){
    	String s = "   this is  a good     day   ";
    	System.out.println(this.reverseWords1(s));
    }


    //------ leetcode 557  reverse words in a string 23ms  ac 0412
    public String reverseWords2(String s){
    	char[] sarr = s.toCharArray();
    	for(int i=0; i < sarr.length;i++){
    		int k = i;//记住起始位置
    		while(i < sarr.length && sarr[i] != ' ') i++;
    		int j = i-1;//记住终止位置
    		while(k < j){
    			char tmp = sarr[k];
    			sarr[k++] = sarr[j];
    			sarr[j--] = tmp;
    		}
    	}
    	return new String(sarr);
    }
    
    public void reverseWords2Test(){
    	System.out.println(this.reverseWords2("Let's take Leetcode contest"));
    }
    
    
   //------- leetcode 434  Number of segments in a string 0412 beats 80.43%
    public int countSegments(String s) {
    	int cnt = 0;
    	for(int i = 0;i<s.length();i++){
    		if(s.charAt(i) == ' ') continue;
    		while(i < s.length() &&  s.charAt(i) != ' ') i++;//注意while中的写法
    		cnt++;
    	}
    	return cnt;
    }
    
    public void countSegmentsTest(){
    	System.out.println(this.countSegments("  hello,   my  name is yinshuai   "));
    }
    
    
    //------- count and say  leetcode 38   ac beat 32.5%  0412
    public String countAndSay(int n) {
    	StringBuffer sb = new StringBuffer();
    	sb.append(1);
        for(int i =1;i < n;i++){
        	StringBuffer newSb = new StringBuffer();
        	for(int j = 0;j < sb.length();){//值得学习,要从1开始迭代哦
        		int k = j;//看看有多少重复的,有个守卫，这样j才能继续向前探
        		while(j < sb.length()-1 && sb.charAt(j) == sb.charAt(j+1)){//前面的限制必须做。
        			j++;
        		}
        		if(k == j) {
        			newSb.append("1" + sb.charAt(j));
        			j++;
        		}else{
        			newSb.append(j-k+1);
        			newSb.append(sb.charAt(j));
        			j++;
        		}
        	}
        	sb = newSb;
        }
        return sb.toString();
    }
    public void countAndSayTest(){
    	System.out.println(this.countAndSay(8));
    	
    }
    
    

    //----- niukewang  twosum problem  leetcode ac 
    public int[] twoSum(int[] numbers, int target) {
    	int[] res = new int[2];
    	HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
    	for(int i=0;i<numbers.length;i++){
    		if(hm.containsKey(target - numbers[i])){
    			res[0] = hm.get(target-numbers[i]) ;
    			res[1] = i;
    		}
    		hm.put(numbers[i],i);
    	}
    	return res;
    }
    void twoSumTest(){
    	int[] numbers = {4,6,2,1,3,5};
    	int[] ret = this.twoSum(numbers,3);
    	if(ret == null){
    		return;
    	}
    	for(int val:ret)
    		System.out.println(val);
    }
    
    
    
    
    


    
	//--------- leetcode16  3sum closest ac 
    public int threeSumClosest(int[] nums, int target) {
    	java.util.Arrays.sort(nums);
    	int minGap = Integer.MAX_VALUE;//最小值
    	int result = 0;
        for(int i=0;i<nums.length-2;i++){
        	int first = i+1,last = nums.length-1;
        	while(first < last){//一次只有一个蹦的。然后就是碰撞指针
        		int sum = nums[first] + nums[last] + nums[i];
        		int gap = Math.abs(target - sum);
        		if(gap < minGap){
        			result = sum;
        			minGap = gap;
        		}
        		if(sum < target) first++;
        		else last--;
        	}
        }
        return result;
    }
    public void threeSumClosestTest(){
    	int[] nums = {0,1,2};
    	this.threeSumClosest(nums,3);
    }
    
    //------- leetcode 15   wrong ans  
    public List<List<Integer>> threeSum(int[] nums) {
    	java.util.Arrays.sort(nums);
    	List<Integer> temp = new ArrayList<Integer>();
    	List<List<Integer>> result = new ArrayList<List<Integer>>();
    	for(int i=0;i< nums.length-2;i++){
    		int first = i+1,last = nums.length-1;
    		while(first < last){
    			int sum = nums[i] + nums[first] + nums[last];
    			if(sum == 0){
    				temp.add(nums[i]);
    				temp.add(nums[first]);
    				temp.add(nums[last]);
    				result.add(temp);
    				temp.clear();
    				
    			}
    			else if(sum < 0) first++;
    			else last--; 
    		}
    	}
    	return result;
    }
    public void threeSumTest(){
    	int[] nums = {1,2,3,-4,-5,-2,0,1,-1,0};
    	List<List<Integer>> ret = threeSum(nums);
    	for(List<Integer> val:ret){
    		for(Integer vall: val)
    			System.out.print(val + " ");
    		System.out.println();
    	}
    }
    
    
    
    //reverse string  每个都要配置一个reverse函数，链表也不例外？
    public String reverseString(String str){
    	char[] strArr = str.toCharArray();
    	int strLen = strArr.length;
    	for(int i=0;i<strLen/2;i++){
    		char tmp = strArr[i];
    		strArr[i] = strArr[strLen-1-i];
    		strArr[strLen-1-i] = tmp;
    	}
    	return String.valueOf(strArr);
    }
    



 
    


    
    
    //---------- leetcode 43  高精度乘法   0411  product  乘法
    public String multiply(String num1, String num2) {
    	int m = num1.length(),n = num2.length();
    	int[] pos = new int[m+n];//两个数字相乘，最多占据m+n位
    	for(int i = m-1; i >=0;i--){
    		for(int j = n-1;j >= 0;j--){
    			int mul = (num1.charAt(i) - '0')*(num2.charAt(j) - '0');
    			int sum = mul + pos[i+j+1];//进位直接存储在紧邻的高位置
    			pos[i+j] += sum/10;
    			pos[i+j+1] = sum%10;
    		}
    	}
    	for(int i=0;i<m+n;i++) System.out.print(pos[i]);
    	System.out.println();
    	StringBuffer sb = new StringBuffer();
    	if(pos[0] > 0) sb.append(pos[0]);
    	for(int i = 1;i<m+n;i++) sb.append(pos[i]);
    	return sb.toString();
    }
    //高精度乘法中的乘以1 不知道正确性,再计算高精度乘法的时候咩有用到。
    public String multiplyOneNum(String str,char num){//辅助函数，乘以一个字符
    	StringBuffer sb = new StringBuffer();
    	int carry = 0;
    	int i;
    	for(i= str.length()-1;i >= 0;i--){
    		int sum = (str.charAt(i) - '0') * (num - '0') + carry;
    		sb.append(sum%10);
    		carry = sum/10;
    	}
    	//这种plus one 或者乘以1的题目就要看看最终的进位情况了
    	if(carry > 0) sb.append(carry);
    	return sb.reverse().toString();
    	
    }
    
    public void multiplyTest(){
//    	StringBuffer res = this.multiplyOneNum("999999999999999999999999",'8');
    	String res = this.multiply("123","456");
    	System.out.println(res);
//    	String res = this.multiply("1234","9999");
//    	System.out.println(res);
    }
    
    //leetcode  415  0411 add strings 
    
    
    
    
    //----------- leetcode 58  Length of last word  ac 0412 beats 74.63%------
    //重要的事情：：： 索引 索引 索引  ac 
    public int lengthOfLastWord(String s) {
    	if(s.isEmpty()) return 0;
    	int index = s.length()-1;
    	while(index >= 0 && s.charAt(index) == ' ') index--;//判断,很重要  这里的index >= 0 or index exception
    	if(index < 0) return 0;//跳过你然后判断下
    	int cnt = 0;
    	for(int i=index;i>=0;i--){
    		if(s.charAt(i) != ' ') cnt++;
    		else break;
    	}
    	return cnt;
    }
    
    public void lengthOfLastWordTest(){
    	String s = "  ";
    	System.out.println(this.lengthOfLastWord(s));
    }
    
    //leetcode 125  Valid Palindrome 字符串相关的 ac beats 36%  0412
    public boolean isPalindrome(String s){
    	//对撞指针？ 直接利用索引 充分利用索引
    	String ss = s.toLowerCase();//稳妥些，虽然可以在下面的大循环中转换大小写
    	for(int i=0,j=ss.length()-1;i < j;){//for循环也是清晰
    		if(!this.isAlphanumeric(ss.charAt(i))) i++;//每次只是执行一种逻辑判断
    		else if(!this.isAlphanumeric(ss.charAt(j))) j--;
    		else if(ss.charAt(i) != ss.charAt(j)) return false;
    		else{i++;j--;}
    	}
    	return true;
    }
    public void isPalindromeTest(){
    	String s = "A man, a plan, a canal: Panama";
    	System.out.println(this.isPalindrome(s));
    	String ss = "race a car";
    	System.out.println(this.isPalindrome(ss));
    }
    
    public boolean isAlphanumeric(char c){
    	if((c >= 'a' && c <= 'z')|| (c >='0' && c <='9') || (c >= 'A' && c <= 'Z')) return true;
    	return false;
    }
    
    
    
    
    
    //----- leetcode 205   ac  very good solution beats 94.7%
    public boolean isIsomorphic(String s,String t){
    	char[] charSetPos = new char[256];
    	char[] charSetNeg = new char[256]is.isIsomorphic("ab","aa"));
    	System.out.println(this.isIsomorphic("foo","bar"));
    }
    

    // ---- leetcode 459  repeated substring pattern 
    public String reverseWords6(String s){;//这个小数组的使用。
    	for(int i=0;i<s.length();i++){
    		char schar = s.charAt(i);
    		char tchar = t.charAt(i);
    		if(charSetPos[schar] == 0){//还有一点就是充分利用了0这个空位，因为在字符串中遇到ascii为0的地方，值为'\0'
    			if(charSetNeg[tchar] > 0) return false;
    			else{
        			charSetPos[schar] = tchar;
        			charSetNeg[tchar] = schar;
    			}
    		}else{
    			if(charSetPos[schar] != tchar) return false;
    		}
    	}
    	return true;
    }
    
    public void isIsomorphicTest(){
    	System.out.println(this.isIsomorphic("ab","aa"));
    	System.out.println(this.isIsomorphic("foo","bar"));
    }
    

    // ---- leetcode 459  repeated substring pattern 
    public String reverseWords(String s){
    	char[] arr = s.toCharArray();
    	for(int i=0;i<arr.length;i++){
    		if(arr[i] == ' ') continue;
    		else{
    			int j = i;
    			while(i < arr.length && arr[i] != ' ') i++;
    			while(j < i){
    			}
    		}
    	}
    }
    
    
    
    
    
    
    
    
    
    //---------- leetcode 438  find all anagrams in a string 
    
    
    //---------- 金典 Page 146 4.1 这里下周继续看哦
    private HashMap<TreeNode,Integer> heightMap = new HashMap<TreeNode,Integer>();  
    public int getHeight(TreeNode tree){//获取树的高度
    	if(this.heightMap.containsKey(tree)) return this.heightMap.get(tree);
    	if(tree == null) return 0;//终止条件
    	return Math.max(getHeight(tree.left),getHeight(tree.right)) + 1;
    }
    public boolean isBalanced(TreeNode root){
    	if(root == null) return true;//终止条件
    	int heightDiff = getHeight(root.left) - getHeight(root.right);
    	if(Math.abs(heightDiff) > 1){
    		return false;
    	}else{
    		return isBalanced(root.left) && isBalanced(root.right);//细分为更小的任务。
    	}
    }
    

    
    public ListNode reverseListHeadInsert(ListNode head){
    	if(head == null || head.next == null) return head;//也要保证无环
    	ListNode dummy = new ListNode(-1);//辅助节点
    	dummy.next = head;//连接
    	ListNode nextNode = head;
    	ListNode node = head.next;
    	while(node != null){
    		ListNode tmp = node.next;
    		node.next = nextNode;
    		dummy.next = node;
    		nextNode = node;
    		node = node.next;
    		node = tmp;
    	}
    	return dummy.next;
    		
    }
    
    /**
     * reverseBetween 头插法 更好应该
     */
    public ListNode reverseBetweenHeadInsert(ListNode head, int m, int n){
    	if(head == null || m >= n) return head;
    	ListNode dummy = new ListNode(-1);
    	ListNode prev = dummy;
    	prev.next = head;//连上旧链接
    	//这里下面使用了m-1,但是实际上，对于原始链表来说，只是最终指向了第m-1个节点。因为多添加了个链表头
    	for(int i = 0;i < m-1;i++){
    		prev = prev.next;
    	}
    	ListNode head2 = prev;//保存第m-1个节点的位置,这个变量名字的递归一很有意思。头插法中非常重要的一个结点 
    	ListNode nextNode = prev.next;//第m个节点,也是头插法中非常重要的一个结点。
    	for(int i=m;i<n;i++){
    		ListNode tmp = nextNode.next.next;
    		head2.next = nextNode.next;
    		nextNode.next = head2.next;
    		nextNode = head2.next;
    		
    	}
    	
    }
    
    //leetcode 42
    public int trap(int[] height) {
    	int minHeightPos,waterCnt;
    	for(int i=0,j=height.length;i < j;){
    		minHeightPos = height[i] < height[j] ? i:j;
    		if(minHeightPos == i){
    			
    		}
    		
    	} 
    }
  

    
	public static void main(String[] args) {
		Solution so = new Solution();
//		so.countSegmentsTest();
//		so.countAndSayTest();
//		so.reverseStrTest();
		


		
//		so.multiplyTest();
//		so.lengthOfLastWordTest();
//		res = "this is a good day";
//		System.out.println(res);
//		StringBuffer sb = new StringBuffer();
//		String a = "yinshuai";
//		System.out.println(a.substring(0, 3));
//		sb.append("good");
//		System.out.println(sb.append(a.substring(3)));

	}
}






